ListSums:
    type R = {
        A: Int,
        B: String
    }
    type S = {
        B: String,
        C: Int
    }

    extern fmul(x : Int, y : Int) : Float = "{x} * {y}"

    state Rs : Bag<R>
    state Ss : Bag<S>

    invariant unique [r.A | r <- Rs];

    query q()
        [(r.A, sum [ s.C | s <- Ss, s.B == r.B ]) | r <- Rs ]

    op insert_r(r: R)
        assume not exists [ r0 | r0 <- Rs, r.A == r0.A ];
        Rs.add(r);

    op insert_s(s: S)
        Ss.add(s);
